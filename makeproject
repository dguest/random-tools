#!/usr/bin/env bash
# makefile generator
#
# TODO:
#  - Make this handle ROOT dictionary generation rules

set -eu

_usage() {
    echo "usage: ${0##*/} [-hrdn] [-p <python library>] [-e <exe prefix>]"
}
DEFAULT_PREFIX=test-
_help() {
    _usage
    cat <<EOF

Make a project template. If no prefix is given use "$DEFAULT_PREFIX".
If no prefix is given but a python library name is given, only make
a python library.

Requires an empty directory.

Options:
 -h: get help
 -r: use ROOT
 -d: use HDF5
 -n: use ndhist (requires HDF5)
 -p <library name>: make python lib
 -e <executable prefix>: prefix for all executables.

EOF
}

# __________________________________________________________________
# top level run script

_run() {
    local opt
    local ADD_ROOT=''
    local ADD_HDF=''
    local ADD_NDHIST=''
    local PYTHON_LIB=''
    local PREFIX=''
    while getopts ":hrdnp:e:" opt $@; do
	case $opt in
	    h) _help; return 1;;
	    r) ADD_ROOT=1 ;;
	    d) ADD_HDF=1 ;;
	    n) ADD_NDHIST=1 ;;
	    p) PYTHON_LIB=${OPTARG} ;;
	    e) PREFIX=${OPTARG} ;;
	    # handle errors
	    \?) _usage; echo "Unknown option: -$OPTARG" >&2; exit 1;;
            :) _usage; echo "Missing argument for -$OPTARG" >&2; exit 1;;
            *) _usage; echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
	esac
    done

    # various checks
    if [[ ! $PREFIX && ! $PYTHON_LIB ]] ; then
	PREFIX=$DEFAULT_PREFIX
	echo "WARNING: setting default prefix to '$PREFIX'"
    fi
    if [[ $ADD_NDHIST && ! $ADD_HDF ]] ; then
	ADD_HDF=1
	echo "WARNING: turned on HDF5 because ndhist was enabled"
    fi
    if [[ $PREFIX == $PYTHON_LIB ]] ; then
	echo "ERROR: python lib and prefix can't be the same..." >&2
	echo "       maybe add '-' to the end of prefix?" >&2
	exit 1
    fi
    shift $(($OPTIND - 1))
    if [[ $@ ]] ; then
	_usage
	echo "ERROR: should get no args, got '$@', quitting..." >&2
	return 1
    fi
    if _files_exist ; then
	_usage
	echo "ERROR: found files in current dir, quitting..." >&2
	return 1
    fi

    # actually build the project starting here
    local MAKEFILE=makefile
    _head_comment >| $MAKEFILE
    _section "Basic Setup" >> $MAKEFILE
    _make_base >> $MAKEFILE

    # add objects to be built
    _section "Add Top Level Objects" >> $MAKEFILE
    if [ $PYTHON_LIB ] ; then
	_add_python_objects $PYTHON_LIB >> $MAKEFILE
    fi
    if [ $PREFIX ] ; then
	_add_exe_objects $PREFIX >> $MAKEFILE
    fi

    # add libraries to paths
    if [[ $PYTHON_LIB || $ADD_ROOT || $ADD_HDF || $ADD_NDHIST ]] ; then
	_section "Add Libraries" >> $MAKEFILE
    fi
    if [ $ADD_ROOT ] ; then
	_add_root >> $MAKEFILE
    fi
    if [ $ADD_HDF ] ; then
	_add_hdf >> $MAKEFILE
    fi
    if [ $ADD_NDHIST ] ; then
	_add_ndhist >> $MAKEFILE
    fi
    if [ $PYTHON_LIB ] ; then
       _add_python >> $MAKEFILE
    fi

    # first rule is the call to `all`, then add other build rules
    _add_all_call >> $MAKEFILE
    _section "Add Build Rules" >> $MAKEFILE
    if [ $PYTHON_LIB ] ; then
	_add_python_build $PYTHON_LIB >> $MAKEFILE
    fi
    if [ $PREFIX ] ; then
	_add_exe_build >> $MAKEFILE
    fi
    _add_compile_rule >> $MAKEFILE
    _add_dep_gen >> $MAKEFILE

    # write example source files
    _make_obj_dummy tools
    if [ $PYTHON_LIB ] ; then
	_make_py_dummy $PYTHON_LIB tools
    fi
    if [ $PREFIX ] ; then
	_make_src_dummy ${PREFIX}main tools
    fi
}

_files_exist () {
    files=$(shopt -s nullglob dotglob; echo *)
    if (( ${#files} )) ; then
       return 0
    else
	return 1
    fi
}

_section() {
    cat <<EOF
# _______________________________________________________________
# $1

EOF
}

_head_comment() {
    cat <<EOF
# makefile for generic c++ project
# generated with \`${0##*/}\` on $(date)
# Author: Dan Guest <dguest@cern.ch>

EOF
}

_make_base() {
    cat <<EOF
# --- set dirs
BUILD        := build
SRC          := src
INC          := include
DICT         := dict
OUTPUT       := bin
LIB          := lib

#  set search path
vpath %.cxx  \$(SRC)
vpath %.hh   \$(INC)
vpath %.h    \$(INC)
vpath %Dict.h \$(DICT)
vpath %Dict.cxx \$(DICT)

# --- set compiler and flags (roll c options and include paths together)
CXX          ?= g++
CXXFLAGS     := -O2 -Wall -fPIC -I\$(INC) -g -std=c++11
LIBS         := # blank, more will be added below
LDFLAGS      := # blank, more will be added below

# ---- define objects from files in the SRC directory
GEN_OBJ_SRC   := \$(wildcard \$(SRC)/*.cxx)
GEN_OBJ       := \$(notdir \$(GEN_OBJ_SRC:%.cxx=%.o))

# this list may be manipulated in other segments further down
GEN_OBJ_PATHS := \$(GEN_OBJ:%=\$(BUILD)/%)

# --- all top level (added further down)
ALL_TOP_LEVEL :=

EOF
}

_add_hdf() {
    cat <<EOF
# --- add HDF5
HDF_INFO := \$(shell h5c++ -showconfig | grep 'Installation point:')
HDF_PATH := \$(strip \$(shell echo \$(HDF_INFO) | cut -d ':' -f 2 ))
ifndef HDF_PATH
\$(error "couldn't find HDF, quitting")
endif

CXXFLAGS     += -I\$(HDF_PATH)/include
LIBS         += -L\$(HDF_PATH)/lib -Wl,-rpath,\$(HDF_PATH)/lib
LIBS         += -lhdf5_cpp -lhdf5

EOF
}

_add_ndhist() {
    cat <<EOF
LIBS         += \$(shell ndhist-config --libs)
CXXFLAGS     += \$(shell ndhist-config --cflags)

EOF
}

_add_python() {
    cat <<EOF
# --- python config
PY_CONFIG := python3-config

PY_FLAGS  :=   \$(shell \$(PY_CONFIG) --includes)
PY_LIBS   := -L\$(shell \$(PY_CONFIG) --prefix)/lib
PY_LIBS   +=   \$(shell \$(PY_CONFIG) --libs)

# define these last because they inherit other LDFLAGS
PY_LDFLAGS := \$(LDFLAGS)
PY_LDFLAGS += \$(PY_LIBS)
PY_LDFLAGS += -shared

EOF
}

_add_root() {
    cat <<EOF
# --- load in root config
ROOTCFLAGS    := \$(shell root-config --cflags)
ROOTLIBS      := \$(shell root-config --libs)
# ROOTLIBS      += -lCore -lTree -lRIO
ROOTLDFLAGS   := \$(shell root-config --ldflags)

CXXFLAGS     += \$(ROOTCFLAGS)
LDFLAGS      += \$(ROOTLDFLAGS)
LIBS         += \$(ROOTLIBS)

EOF
}

_add_all_call() {
    cat <<EOF
# --- first call here
all: \$(ALL_TOP_LEVEL)

EOF
}

_add_exe_objects() {
    local PREFIX=$1
    cat <<EOF
# --- stuff used for the c++ executable
EXE_PREFIX   := ${PREFIX}

ALL_EXE_SRC   := \$(wildcard \$(SRC)/\$(EXE_PREFIX)*.cxx)
ALL_EXE       := \$(notdir \$(ALL_EXE_SRC:%.cxx=%))
ALL_EXE_PATHS := \$(ALL_EXE:%=\$(OUTPUT)/%)

# filter out the general objects
GEN_OBJ_PATHS := \$(filter-out \$(BUILD)/\$(EXE_PREFIX)%.o,\$(GEN_OBJ_PATHS))

# add to all top level
ALL_TOP_LEVEL += \$(ALL_EXE_PATHS)

EOF
}
_add_exe_build() {
    cat <<EOF
# build exe
\$(OUTPUT)/\$(EXE_PREFIX)%: \$(GEN_OBJ_PATHS) \$(BUILD)/\$(EXE_PREFIX)%.o
	@mkdir -p \$(OUTPUT)
	@echo "linking $^ --> \$@"
	@\$(CXX) -o \$@ $^ \$(LIBS) \$(LDFLAGS)

EOF
}

_add_python_objects() {
    PYLIB=$1
    cat <<EOF
# --- python top level objects
PY_OBJ       := ${PYLIB}.o
PY_OBJ_PATH  := \$(PY_OBJ:%=\$(BUILD)/%)
PY_SRC_PATH  := \$(PY_OBJ:%.o=\$(SRC)/%.cxx)
PY_SO        := \$(LIB)/${PYLIB}.so

# filter out the general objects
GEN_OBJ_PATHS := \$(filter-out \$(BUILD)/${PYLIB}.o,\$(GEN_OBJ_PATHS))

# add to all top level
ALL_TOP_LEVEL += \$(PY_SO)

EOF
}
_add_python_build(){
    PYLIB=$1
    cat <<EOF
# python object compile
\$(PY_OBJ_PATH): \$(PY_SRC_PATH)
	@echo compiling python object \$@
	@mkdir -p \$(BUILD)
	@\$(CXX) -c \$(CXXFLAGS) \$(PY_FLAGS) $< -o \$@

# python linking
\$(PY_SO): \$(GEN_OBJ_PATHS) \$(PY_OBJ_PATH)
	@mkdir -p \$(LIB)
	@echo "linking $^ --> \$@"
	@\$(CXX) -o \$@ $^ \$(LIBS) \$(PY_LDFLAGS)

EOF
}

_add_compile_rule() {
    cat <<EOF
# compile rule
\$(BUILD)/%.o: %.cxx
	@echo compiling $<
	@mkdir -p \$(BUILD)
	@\$(CXX) -c \$(CXXFLAGS) $< -o \$@

EOF
}

_add_dep_gen() {
    cat <<EOF
# use auto dependency generation
ALLOBJ       := \$(GEN_OBJ)
DEP          := \$(BUILD)

ifneq (\$(MAKECMDGOALS),clean)
ifneq (\$(MAKECMDGOALS),rmdep)
include  \$(ALLOBJ:%.o=\$(DEP)/%.d)
endif
endif

DEPTARGSTR = -MT \$(BUILD)/\$*.o -MT \$(DEP)/\$*.d
\$(DEP)/%.d: %.cxx
	@echo making dependencies for $<
	@mkdir -p \$(DEP)
	@\$(CXX) -MM -MP \$(DEPTARGSTR) \$(CXXFLAGS) \$(PY_FLAGS) $< -o \$@

# clean
.PHONY : clean rmdep all
CLEANLIST     = *~ *.o *.o~ *.d core
clean:
	rm -fr \$(CLEANLIST) \$(CLEANLIST:%=\$(BUILD)/%) \$(CLEANLIST:%=\$(DEP)/%)
	rm -fr \$(BUILD) \$(DICT) \$(BIN)

rmdep:
	rm -f \$(DEP)/*.d
EOF
}

_make_src_dummy() {
    mkdir -p src/
    local EXE_NAME=$1
    local TEST_OBJ=${2-testobj}
    cat <<EOF >| src/${EXE_NAME}.cxx
#include "${TEST_OBJ}.hh"
#include <cstdio>
#include <cstdlib>
int main(int argc, char* argv[]) {
  int in = 0;
  if (argc > 1) in = atoi(argv[1]);
  int testint = testfunc(in);
  printf("bonjour et %i\n", testint);
  return 0;
}
EOF
}

_make_obj_dummy() {
    mkdir -p src/
    mkdir -p include/
    local OBJ_NAME=$1

    cat <<EOF >| src/${OBJ_NAME}.cxx
#include "${OBJ_NAME}.hh"
#include <stdexcept>
int testfunc(int in) {
  if (in == 42) {
    throw std::runtime_error("You a nerd");
  }
  return in + 1;
}
EOF

    local GUARD=$(tr '[:lower:]-' '[:upper:]_' <<< $OBJ_NAME)_HH
    cat <<EOF >| include/${OBJ_NAME}.hh
#ifndef ${GUARD}
#define ${GUARD}
int testfunc(int in = 0);
#endif
EOF
}

_make_py_dummy() {
    mkdir -p src/
    local MODNAME=$1
    local TEST_OBJ=${2-testobj}
    cat <<EOF >| src/${MODNAME}.cxx
#include <Python.h>
#include "${TEST_OBJ}.hh"

#include <stdexcept>

static PyObject* py_alg(PyObject *self, PyObject *args)
{
  const char* echo_this;
  int some_int = 0;
  bool ok = PyArg_ParseTuple(args,"s|i:alg", &echo_this, &some_int);
  if (!ok) return NULL;
  try {
    int newret = testfunc(some_int);
    printf("hi %s %i\n", echo_this, newret);
    return Py_BuildValue("i", newret);
  }
  catch (const std::exception& e) {
    PyErr_SetString(PyExc_Exception, e.what());
    return NULL;
  }
}


static PyMethodDef methods[] = {
  {"test", py_alg, METH_VARARGS,
   "don't ask, read the source"},
  {NULL, NULL, 0, NULL}   /* sentinel */
};

static struct PyModuleDef ${MODNAME} = {
   PyModuleDef_HEAD_INIT,
   "testpy",   /* name of module */
   "this be testpy", /* module documentation, may be NULL */
   -1,       /* size of per-interpreter state of the module,
                or -1 if the module keeps state in global variables. */
   methods
};

extern "C" {
  PyMODINIT_FUNC PyInit_${MODNAME}(void)
  {
    return PyModule_Create(&${MODNAME});
  }
}
EOF
}

_run $@
