#!/usr/bin/env bash

set -eu

_usage() {
    echo "${0##*/} [-hrdp] "
}
_help() {
    _usage
    cat <<EOF
Make a project template.
WARNING: use in an empty directory

Options:
 -h: get help
 -r: use ROOT
 -d: use HDF5
 -p: use python

EOF
}

# __________________________________________________________________
# top level run script

_run() {
    local opt
    local ADD_ROOT=''
    local ADD_HDF=''
    while getopts "hrdp" opt $@; do
	case $opt in
	    h) _help; return 1;;
	    r) ADD_ROOT=1 ;;
	    d) ADD_HDF=1 ;;
	esac
    done
    if [[ ${VARNAME-} == ? ]] ; then
	echo "error, exiting..." >&2
	return 1
    fi
    shift $(($OPTIND - 1))
    if [[ $@ ]] ; then
	_usage
	echo "error: should get no args, got $@..." >&2
	return 1
    fi
    local MAKEFILE=makefile
    _head_comment >| $MAKEFILE
    _make_base >> $MAKEFILE
    # _add_hdf >> $MAKEFILE
    # _add_ndhist >> $MAKEFILE
    # _add_python >> $MAKEFILE
    _add_root >> $MAKEFILE
    _add_general_buildsec main >> $MAKEFILE
    # _add_python_rules _testpy >> $MAKEFILE
    _add_compile_rule >> $MAKEFILE
    _add_dep_gen >> $MAKEFILE
    _make_src_dummy
}

_head_comment() {
    cat <<EOF
# makefile
# auto generated on $(date)
EOF
}

_make_base() {
    cat <<EOF

# --- set dirs
BUILD        := build
SRC          := src
INC          := include
DICT         := dict
OUTPUT       := bin

#  set search path
vpath %.cxx  $(SRC)
vpath %.hh   $(INC)
vpath %.h    $(INC)
vpath %Dict.h $(DICT)
vpath %Dict.cxx $(DICT)

# --- set compiler and flags (roll c options and include paths together)
CXX          ?= g++
CXXFLAGS     := -O2 -Wall -fPIC -I$(INC) -g -std=c++11

# ---- define objects
GEN_OBJ     := # DEFINE GENERAL OBJECTS HERE
GEN_OBJ_PATHS := $(GEN_OBJ:%=$(BUILD)/%)

EOF
}

_add_hdf() {
    cat <<EOF
# --- hdf
HDF_INFO := $(shell h5c++ -showconfig | grep 'Installation point:')
HDF_PATH := $(strip $(shell echo ${HDF_INFO} | cut -d ':' -f 2 ))
ifndef HDF_PATH
$(error "couldn't find HDF, quitting")
endif

CXXFLAGS     += -I$(HDF_PATH)/include
LIBS         += -L$(HDF_PATH)/lib -Wl,-rpath,$(HDF_PATH)/lib
LIBS         += -lhdf5_cpp -lhdf5

EOF
}

_add_ndhist() {
    cat <<EOF
LIBS         := $(shell ndhist-config --libs)
CXXFLAGS     += $(shell ndhist-config --cflags)

EOF
}

_add_python() {
    cat <<EOF
# --- python config
PY_CONFIG := python3-config

PY_FLAGS  :=   $(shell $(PY_CONFIG) --includes)
PY_LIBS   := -L$(shell $(PY_CONFIG) --prefix)/lib
PY_LIBS   +=   $(shell $(PY_CONFIG) --libs)

PY_LDFLAGS := $(LDFLAGS)
PY_LDFLAGS += $(PY_LIBS)
PY_LDFLAGS += -shared

EOF
}

_add_root() {
    cat <<EOF
# --- load in root config
ROOTCFLAGS    := $(shell root-config --cflags)
ROOTLIBS      := $(shell root-config --libs)
# ROOTLIBS      += -lCore -lTree -lRIO
ROOTLDFLAGS   := $(shell root-config --ldflags)

CXXFLAGS     += $(ROOTCFLAGS)
LDFLAGS      += $(ROOTLDFLAGS)
LIBS         += $(ROOTLIBS)

EOF
}

_add_general_buildsec() {
    local BASE_ROUTINE=$1
    cat <<EOF
# stuff used for the c++ executable
ALL_EXE       := ${BASE_ROUTINE}
ALL_EXE_PATHS := $(ALL_EXE:%=$(OUTPUT)/%)

# --- all routine
all: $(ALL_EXE_PATHS)

# --- build top level
$(OUTPUT)/${BASE_ROUTINE}: $(GEN_OBJ_PATHS) $(BUILD)/${BASE_ROUTINE}.o
	@mkdir -p $(OUTPUT)
	@echo "linking $^ --> $@"
	@$(CXX) -o $@ $^ $(LIBS) $(LDFLAGS)

EOF
}

_add_python_rules() {
    local BASE_ROUTINE=$1
    cat <<EOF
# --- python top level objects
PY_OBJ       := ${BASE_ROUTINE}.o
PY_OBJ_PATHS := $(PY_OBJ:%=$(BUILD)/%)
PY_SO        := ${BASE_ROUTINE}.so

# --- all routine
all: $(PY_SO)

# python object compile
$(BUILD)/_%.o: _%.cxx
	@echo compiling python object $@
	@mkdir -p $(BUILD)
	@$(CXX) -c $(CXXFLAGS) $(PY_FLAGS) $< -o $@

# python linking
$(PY_SO): $(GEN_OBJ_PATHS) $(BUILD)/${BASE_ROUTINE}.o
	@mkdir -p $(OUTPUT)
	@echo "linking $^ --> $@"
	@$(CXX) -o $@ $^ $(GEN_OBJ_PATHS) $(LIBS) $(PY_LDFLAGS)
EOF

_add_compile_rule() {
    cat <<EOF
# compile rule
$(BUILD)/%.o: %.cxx
	@echo compiling $<
	@mkdir -p $(BUILD)
	@$(CXX) -c $(CXXFLAGS) $< -o $@

EOF
}

_add_dep_gen() {
    cat <<EOF
# use auto dependency generation
ALLOBJ       := $(GEN_OBJ)
DEP          := $(BUILD)

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),rmdep)
include  $(ALLOBJ:%.o=$(DEP)/%.d)
endif
endif

DEPTARGSTR = -MT $(BUILD)/$*.o -MT $(DEP)/$*.d
$(DEP)/%.d: %.cxx
	@echo making dependencies for $<
	@mkdir -p $(DEP)
	@$(CXX) -MM -MP $(DEPTARGSTR) $(CXXFLAGS) $(PY_FLAGS) $< -o $@

# clean
.PHONY : clean rmdep all
CLEANLIST     = *~ *.o *.o~ *.d core
clean:
	rm -fr $(CLEANLIST) $(CLEANLIST:%=$(BUILD)/%) $(CLEANLIST:%=$(DEP)/%)
	rm -fr $(BUILD) $(DICT)

rmdep:
	rm -f $(DEP)/*.d
EOF
}

_make_src_dummy() {
    mkdir -p src/
    cat <<EOF >| src/main.cxx
#include <cstdlib>
int main(int argc, char* argv[]) {
  puts("bonjour");
  return 0;
}
EOF
}

_run $@
